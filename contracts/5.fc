{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=370; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id 
{
  var list = empty_tuple();

  var F_n = n;
  var F_nk = n + k;

  var previous = 0;
  var current = 1;
  var i = 1;

  if (F_n == F_nk)
  {
    return list;
  }

  if (F_n == 0)
  {
    list = tpush(list, 0);
    
    if (k >= 1)
    {
      list = tpush(list, 1);
    }
  }

  if (F_n == 1)
  {
    list = tpush(list, 1);
  }

  while (i < F_nk - 1)
  {
    var next = previous + current;
    previous = current;
    current = next;
    i += 1;

    if (i >= F_n)
    {
      list = tpush(list, current);
    }
  }

  return list;
}
