() recv_internal() 
{
}

int tlen(tuple t) asm "TLEN";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id 
{
  int previous = 0;
  int current = 1;
  
  if (n < 0){
    n = 0;
  }

  repeat (n + k - 1)
  {
    (previous, current) = (current, previous + current);
  }

  tuple list = null();
  repeat (k)
  {
    list~push_back(previous);
    
    var tmp = current - previous;
    current = previous;
    previous = tmp;
  }
  
  var result = empty_tuple();
  repeat (k){
    result~tpush(list~pop_back());
  }
  
  return result;
}
