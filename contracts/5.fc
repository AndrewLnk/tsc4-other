() recv_internal()
{
}

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id
{
  if (k == 0){
    return empty_tuple();
  }
  else
  {
    if (n <= 0)
    {
      var previous = 0;
      var current = 1;

      repeat (n - 1)
      {
        (previous, current) = (current, previous + current);
      }
      
      var list = empty_tuple();
      list~tpush(n);
      n += 1;
      k -= 1;

      list~tpush(current);
      repeat (k - 1)
      {
        (previous, current) = (current, previous + current);
        list~tpush(current);
      }

      return list;
    }
    else
    {
      var previous = 0;
      var current = 1;

      repeat (n - 1)
      {
        (previous, current) = (current, previous + current);
      }
      
      var list = empty_tuple();
      list~tpush(current);
      repeat (k - 1)
      {
        (previous, current) = (current, previous + current);
        list~tpush(current);
      }

      return list;
    }
  }
}