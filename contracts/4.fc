{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

builder entry(builder b, slice sl, int s)
{
  repeat (slice_bits(sl) / 8)
  {
    var c = sl~load_uint(8);
    var sh = get_shifted_char(c, s);
    b = b.store_uint(sh, 8);
  }

  if (slice_refs(sl) != 0)
  {
    var ns = sl~load_ref().begin_parse();
    var nb = entry(begin_cell(), ns, s);
    var nc = nb.end_cell();
    b = b.store_ref(nc);
  }

  return b;
}

(int) get_shifted_char(int c, int s)
{
  if ((c >= 97) & (c <= 122))
  {
    return (c + s - 97) % 26 + 97;
  }
  else
  {
    if ((c >= 65) & (c <= 90))
    {
      return (c + s - 65) % 26 + 65;
    }
  
    return c;
  }
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id 
{
  var s = text.begin_parse();
  var b = begin_cell().store_uint(s~load_uint(32), 32);

  return entry(b, s, shift).end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id 
{
  var s = text.begin_parse();
  var b = begin_cell().store_uint(s~load_uint(32), 32);

  return entry(b, s, 0 - shift).end_cell();
}
