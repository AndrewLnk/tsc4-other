() recv_internal() {
}

forall X -> (tuple) to_tuple (X x) asm "NOP";

builder entry(builder b, slice sl, tuple table)
{
  var r = slice_bits(sl) / 8;
  repeat (r)
  {
    b~store_uint(table.at(sl~load_uint(8)), 8);
  }

  if (slice_refs(sl) != 0)
  {
    var ns = sl~load_ref().begin_parse();
    var nb = entry(begin_cell(), ns, table);
    b = b.store_ref(nb.end_cell());
  }

  return b;
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id
{
  var s = text.begin_parse();
  var sl = s~load_uint(32);
  var b = begin_cell().store_uint(sl, 32);
  
  var table = empty_tuple();
  var i = 0;
  repeat (65){
    table~tpush(i);
    i += 1;
  }
  repeat (26){
    table~tpush(((i + shift - 65) % 26 + 65));
    i += 1;
  }
  repeat (6){
    table~tpush(i);
    i += 1;
  }
  repeat (26){
    table~tpush(((i + shift - 97) % 26 + 97));
    i += 1;
  }
  repeat (132){
    table~tpush(i);
    i += 1;
  }

  return entry(b, s, table).end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id
{
  var s = text.begin_parse();
  var sl = s~load_uint(32);
  var b = begin_cell().store_uint(sl, 32);

  var table = empty_tuple();
  var i = 0;
  repeat (65){
    table~tpush(i);
    i += 1;
  }
  repeat (26){
    table~tpush(((i - shift - 65) % 26 + 65));
    i += 1;
  }
  repeat (6){
    table~tpush(i);
    i += 1;
  }
  repeat (26){
    table~tpush(((i - shift - 97) % 26 + 97));
    i += 1;
  }
  repeat (132){
    table~tpush(i);
    i += 1;
  }

  return entry(b, s, table).end_cell();
}