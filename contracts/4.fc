() recv_internal() {
}

int tlen(tuple t) asm "TLEN";
forall X -> (tuple, X) ~tpop (tuple t) asm "TPOP";

(cell) entry(builder b, slice sl, int s)
{
  var builders = empty_tuple();

  var continue = true;
  while (continue)
  {
    var r = slice_bits(sl) / 8;
    repeat (r)
    {
      var c = sl~load_uint(8);
      var sh = shifting(c, s);
      b = b.store_uint(sh, 8);
    }

    builders~tpush(b);

    if (slice_refs(sl) != 0)
    {
      var next_sl = sl~load_ref().begin_parse();
      sl = next_sl;
      b = begin_cell();
    }
    else
    {
      continue = false;
    }
  }

  var b = builders~tpop();
  repeat (builders.tlen())
  {
    var nt = builders~tpop();
    b = nt.store_ref(b.end_cell());
  }
  
  ;; Return
  return b.end_cell();
}

(int) shifting(int c, int s)
{
  if ((c >= 97) & (c <= 122))
  {
    return (c + s - 97) % 26 + 97;
  }
  else
  {
    if ((c >= 65) & (c <= 90))
    {
      return (c + s - 65) % 26 + 65;
    }

    return c;
  }
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id
{
  var s = text.begin_parse();
  if (slice_bits(s) <= 32){
    return text;
  }
  
  var sl = s~load_uint(32);
  var b = begin_cell().store_uint(sl, 32);

  return entry(b, s, shift);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id
{
  var s = text.begin_parse();
  if (slice_bits(s) <= 32){
    return text;
  }
  
  var sl = s~load_uint(32);
  var b = begin_cell().store_uint(sl, 32);

  return entry(b, s, 0 - shift);
}