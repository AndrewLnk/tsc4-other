() recv_internal() {
}

forall X -> (tuple, X) ~tpop (tuple t) asm "TPOP";
int tlen(tuple t) asm "TLEN";

(cell) entry(builder b, slice sl, int s)
{
  var depth = slice_depth(sl);
  if (depth == 0)
  {
    var r = slice_bits(sl) / 8;
    repeat (r)
    {
      var c = sl~load_uint(8);
      var sh = shifting(c, s);
      b = b.store_uint(sh, 8);
    }

    return b.end_cell();
  }
  else
  {
    if (depth <= 254)
    {
      var builders = empty_tuple();
      repeat (depth)
      {
        var r = slice_bits(sl) / 8;
        repeat (r)
        {
          var c = sl~load_uint(8);
          var sh = shifting(c, s);
          b = b.store_uint(sh, 8);
        }
        builders~tpush(b);
        b = begin_cell();
        sl = sl~load_ref().begin_parse();
      }

      var r = slice_bits(sl) / 8;
      repeat (r)
      {
        var c = sl~load_uint(8);
        var sh = shifting(c, s);
        b = b.store_uint(sh, 8);
      }
      builders~tpush(b);

      var b = builders~tpop();
      repeat (builders.tlen())
      {
        var nt = builders~tpop();
        b = nt.store_ref(b.end_cell());
      }

      return b.end_cell();
    }
    else
    {
      var builders = empty_tuple();
      var builders2 = empty_tuple();
      repeat (253)
      {
        var r = slice_bits(sl) / 8;
        repeat (r)
        {
          var c = sl~load_uint(8);
          var sh = shifting(c, s);
          b = b.store_uint(sh, 8);
        }
        
        builders~tpush(b);
        b = begin_cell();
        sl = sl~load_ref().begin_parse();
      }
      repeat (depth - 253)
      {
        var r = slice_bits(sl) / 8;
        repeat (r)
        {
          var c = sl~load_uint(8);
          var sh = shifting(c, s);
          b = b.store_uint(sh, 8);
        }
        builders2~tpush(b);
        b = begin_cell();
        sl = sl~load_ref().begin_parse();
      }

      var r = slice_bits(sl) / 8;
      repeat (r)
      {
        var c = sl~load_uint(8);
        var sh = shifting(c, s);
        b = b.store_uint(sh, 8);
      }
      builders~tpush(b);
      
      var b = builders2~tpop();
      repeat (builders2.tlen())
      {
        var nt = builders2~tpop();
        b = nt.store_ref(b.end_cell());
      }
      repeat (builders.tlen())
      {
        var nt = builders~tpop();
        b = nt.store_ref(b.end_cell());
      }

      return b.end_cell();
    }
  }
}

(int) shifting(int c, int s)
{
  if ((c >= 97) & (c <= 122))
  {
    return (c + s - 97) % 26 + 97;
  }
  else
  {
    if ((c >= 65) & (c <= 90))
    {
      return (c + s - 65) % 26 + 65;
    }

    return c;
  }
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id
{
  var s = text.begin_parse();
  var sl = s~load_uint(32);
  var b = begin_cell().store_uint(sl, 32);

  return entry(b, s, shift);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id
{
  var s = text.begin_parse();
  var sl = s~load_uint(32);
  var b = begin_cell().store_uint(sl, 32);

  return entry(b, s, 0 - shift);
}