{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

builder entry(builder b, slice to_slice, int shift)
{
  while (slice_data_empty?(to_slice) == 0)
  {
    var ch = to_slice~load_uint(8);
    var shifted_char = get_shifted_char(ch, shift);
    b = b.store_uint(shifted_char, 8);
  }

  if (slice_refs(to_slice) != 0)
  {
    var next_ref_slice = to_slice~load_ref().begin_parse();
    var new_builder = entry(begin_cell(), next_ref_slice, shift);
    var new_cell = new_builder.end_cell();
    b = b.store_ref(new_cell);
  }

  return b;
}

(int) get_shifted_char(int char, int shift)
{
  if ((char >= 97) & (char <= 122))
  {
    return (char + shift - 97) % 26 + 97;
  }
  else
  {
    if ((char >= 65) & (char <= 90))
    {
      return (char + shift - 65) % 26 + 65;
    }
  
    return char;
  }
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id 
{
  var to_slice = text.begin_parse();
  var b = begin_cell().store_uint(to_slice~load_uint(32), 32);

  return entry(b, to_slice, shift).end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id 
{
  var to_slice = text.begin_parse();
  var b = begin_cell().store_uint(to_slice~load_uint(32), 32);

  return entry(b, to_slice, 0 - shift).end_cell();
}
