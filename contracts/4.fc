() recv_internal() {
}

forall X -> (tuple) to_tuple (X x) asm "NOP";

builder entry(builder b, slice sl, tuple table)
{
  var r = slice_bits(sl) / 8;
  repeat (r)
  {
    var ch = sl~load_uint(8);
    if (ch < 123)
    {
      b~store_uint(table.at(ch), 8); 
    }
    else
    {
      b~store_uint(ch, 8);
    }
  }

  if (~ slice_refs_empty?(sl))
  {
    var ns = sl~load_ref().begin_parse();
    var nb = entry(begin_cell(), ns, table);
    b = b.store_ref(nb.end_cell());
    return b;
  }
  else
  {
    return b;
  }
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id
{
  var s = text.begin_parse();
  var sl = s~load_uint(32);
  var b = begin_cell().store_uint(sl, 32);
  
  tuple table = to_tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]);
  
  table~tpush(15);
  table~tpush(16);
  table~tpush(17);
  table~tpush(18);
  table~tpush(19);
  table~tpush(20);
  
  table~tpush(21);
  table~tpush(22);
  table~tpush(23);
  table~tpush(24);
  table~tpush(25);
  table~tpush(26);
  table~tpush(27);
  table~tpush(28);
  table~tpush(29);
  table~tpush(30);

  table~tpush(31);
  table~tpush(32);
  table~tpush(33);
  table~tpush(34);
  table~tpush(35);
  table~tpush(36);
  table~tpush(37);
  table~tpush(38);
  table~tpush(39);
  table~tpush(40);

  table~tpush(41);
  table~tpush(42);
  table~tpush(43);
  table~tpush(44);
  table~tpush(45);
  table~tpush(46);
  table~tpush(47);
  table~tpush(48);
  table~tpush(49);
  table~tpush(50);

  table~tpush(51);
  table~tpush(52);
  table~tpush(53);
  table~tpush(54);
  table~tpush(55);
  table~tpush(56);
  table~tpush(57);
  table~tpush(58);
  table~tpush(59);
  table~tpush(60);

  table~tpush(61);
  table~tpush(62);
  table~tpush(63);
  table~tpush(64);
  
  table~tpush(shift % 26 + 65);
  table~tpush(((1 + shift) % 26 + 65));
  table~tpush(((2 + shift) % 26 + 65));
  table~tpush(((3 + shift) % 26 + 65));
  table~tpush(((4 + shift) % 26 + 65));
  table~tpush(((5 + shift) % 26 + 65));
  
  table~tpush(((6 + shift) % 26 + 65));
  table~tpush(((7 + shift) % 26 + 65));
  table~tpush(((8 + shift) % 26 + 65));
  table~tpush(((9 + shift) % 26 + 65));
  table~tpush(((10 + shift) % 26 + 65));
  table~tpush(((11 + shift) % 26 + 65));
  table~tpush(((12 + shift) % 26 + 65));
  table~tpush(((13 + shift) % 26 + 65));
  table~tpush(((14 + shift) % 26 + 65));
  table~tpush(((15 + shift) % 26 + 65));

  table~tpush(((16 + shift) % 26 + 65));
  table~tpush(((17 + shift) % 26 + 65));
  table~tpush(((18 + shift) % 26 + 65));
  table~tpush(((19 + shift) % 26 + 65));
  table~tpush(((20 + shift) % 26 + 65));
  table~tpush(((21 + shift) % 26 + 65));
  table~tpush(((22 + shift) % 26 + 65));
  table~tpush(((23 + shift) % 26 + 65));
  table~tpush(((24 + shift) % 26 + 65));
  table~tpush(((25 + shift) % 26 + 65));

  table~tpush(91);
  table~tpush(92);
  table~tpush(93);
  table~tpush(94);
  table~tpush(95);
  table~tpush(96);

  table~tpush(shift % 26 + 97);
  table~tpush(((1 + shift) % 26 + 97));
  table~tpush(((2 + shift) % 26 + 97));
  table~tpush(((3 + shift) % 26 + 97));
  table~tpush(((4 + shift) % 26 + 97));
  table~tpush(((5 + shift) % 26 + 97));

  table~tpush(((6 + shift) % 26 + 97));
  table~tpush(((7 + shift) % 26 + 97));
  table~tpush(((8 + shift) % 26 + 97));
  table~tpush(((9 + shift) % 26 + 97));
  table~tpush(((10 + shift) % 26 + 97));
  table~tpush(((11 + shift) % 26 + 97));
  table~tpush(((12 + shift) % 26 + 97));
  table~tpush(((13 + shift) % 26 + 97));
  table~tpush(((14 + shift) % 26 + 97));
  table~tpush(((15 + shift) % 26 + 97));

  table~tpush(((16 + shift) % 26 + 97));
  table~tpush(((17 + shift) % 26 + 97));
  table~tpush(((18 + shift) % 26 + 97));
  table~tpush(((19 + shift) % 26 + 97));
  table~tpush(((20 + shift) % 26 + 97));
  table~tpush(((21 + shift) % 26 + 97));
  table~tpush(((22 + shift) % 26 + 97));
  table~tpush(((23 + shift) % 26 + 97));
  table~tpush(((24 + shift) % 26 + 97));
  table~tpush(((25 + shift) % 26 + 97));

  return entry(b, s, table).end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id
{
  var s = text.begin_parse();
  var sl = s~load_uint(32);
  var b = begin_cell().store_uint(sl, 32);

  tuple table = to_tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]);
  
  table~tpush(15);
  table~tpush(16);
  table~tpush(17);
  table~tpush(18);
  table~tpush(19);
  table~tpush(20);

  table~tpush(21);
  table~tpush(22);
  table~tpush(23);
  table~tpush(24);
  table~tpush(25);
  table~tpush(26);
  table~tpush(27);
  table~tpush(28);
  table~tpush(29);
  table~tpush(30);

  table~tpush(31);
  table~tpush(32);
  table~tpush(33);
  table~tpush(34);
  table~tpush(35);
  table~tpush(36);
  table~tpush(37);
  table~tpush(38);
  table~tpush(39);
  table~tpush(40);

  table~tpush(41);
  table~tpush(42);
  table~tpush(43);
  table~tpush(44);
  table~tpush(45);
  table~tpush(46);
  table~tpush(47);
  table~tpush(48);
  table~tpush(49);
  table~tpush(50);

  table~tpush(51);
  table~tpush(52);
  table~tpush(53);
  table~tpush(54);
  table~tpush(55);
  table~tpush(56);
  table~tpush(57);
  table~tpush(58);
  table~tpush(59);
  table~tpush(60);

  table~tpush(61);
  table~tpush(62);
  table~tpush(63);
  table~tpush(64);

  table~tpush((0 - shift) % 26 + 65);
  table~tpush(((1 - shift) % 26 + 65));
  table~tpush(((2 - shift) % 26 + 65));
  table~tpush(((3 - shift) % 26 + 65));
  table~tpush(((4 - shift) % 26 + 65));
  table~tpush(((5 - shift) % 26 + 65));

  table~tpush(((6 - shift) % 26 + 65));
  table~tpush(((7 - shift) % 26 + 65));
  table~tpush(((8 - shift) % 26 + 65));
  table~tpush(((9 - shift) % 26 + 65));
  table~tpush(((10 - shift) % 26 + 65));
  table~tpush(((11 - shift) % 26 + 65));
  table~tpush(((12 - shift) % 26 + 65));
  table~tpush(((13 - shift) % 26 + 65));
  table~tpush(((14 - shift) % 26 + 65));
  table~tpush(((15 - shift) % 26 + 65));

  table~tpush(((16 - shift) % 26 + 65));
  table~tpush(((17 - shift) % 26 + 65));
  table~tpush(((18 - shift) % 26 + 65));
  table~tpush(((19 - shift) % 26 + 65));
  table~tpush(((20 - shift) % 26 + 65));
  table~tpush(((21 - shift) % 26 + 65));
  table~tpush(((22 - shift) % 26 + 65));
  table~tpush(((23 - shift) % 26 + 65));
  table~tpush(((24 - shift) % 26 + 65));
  table~tpush(((25 - shift) % 26 + 65));

  table~tpush(91);
  table~tpush(92);
  table~tpush(93);
  table~tpush(94);
  table~tpush(95);
  table~tpush(96);

  table~tpush((0 - shift) % 26 + 97);
  table~tpush(((1 - shift) % 26 + 97));
  table~tpush(((2 - shift) % 26 + 97));
  table~tpush(((3 - shift) % 26 + 97));
  table~tpush(((4 - shift) % 26 + 97));
  table~tpush(((5 - shift) % 26 + 97));

  table~tpush(((6 - shift) % 26 + 97));
  table~tpush(((7 - shift) % 26 + 97));
  table~tpush(((8 - shift) % 26 + 97));
  table~tpush(((9 - shift) % 26 + 97));
  table~tpush(((10 - shift) % 26 + 97));
  table~tpush(((11 - shift) % 26 + 97));
  table~tpush(((12 - shift) % 26 + 97));
  table~tpush(((13 - shift) % 26 + 97));
  table~tpush(((14 - shift) % 26 + 97));
  table~tpush(((15 - shift) % 26 + 97));

  table~tpush(((16 - shift) % 26 + 97));
  table~tpush(((17 - shift) % 26 + 97));
  table~tpush(((18 - shift) % 26 + 97));
  table~tpush(((19 - shift) % 26 + 97));
  table~tpush(((20 - shift) % 26 + 97));
  table~tpush(((21 - shift) % 26 + 97));
  table~tpush(((22 - shift) % 26 + 97));
  table~tpush(((23 - shift) % 26 + 97));
  table~tpush(((24 - shift) % 26 + 97));
  table~tpush(((25 - shift) % 26 + 97));

  return entry(b, s, table).end_cell();
}