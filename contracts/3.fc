() recv_internal() {
}

int tlen(tuple t) asm "TLEN";
forall X -> (tuple, X) ~tpop (tuple t) asm "TPOP";
int ubitsize (int a) asm "UBITSIZE";

;; testable
(cell) find_and_replace(int flag, int value, cell linked_list) method_id 
{
  ;; Ok for opt
  if ((flag <= 0) | (value <= 0)){ return null(); }

  ;; Setup flag info
  var flagL = ubitsize(flag);
  var flagC = begin_cell().store_int(flag, flagL + 1).end_cell();
  var flagS = flagC.begin_parse();
  flagS~load_uint(1);

  var flagT = empty_tuple();
  repeat (flagL)
  {
    flagT~tpush(flagS~load_uint(1));
  }

  ;; Setup value info
  var valueL = ubitsize(value);
  var valueC = begin_cell().store_uint(value, valueL + 1).end_cell();
  var valueS = valueC.begin_parse();
  valueS~load_uint(1);

  var valueT = empty_tuple();
  repeat (valueL)
  {
    valueT~tpush(valueS~load_uint(1));
  }
  
  ;; Create builders !!!!!!!!!!!!!!!!!!!!!1
  var temp = empty_tuple();
  var tl = 0;
  var cache = empty_tuple();

  var sl = linked_list.begin_parse();
  var b = begin_cell();
  var builders = empty_tuple();

  var continue = true;
  while(continue)
  {
     while (slice_bits(sl) > 0)
     {
       int next = 0;

       if (cache.tlen() > 0)
       {
         next = cache~tpop();
       }
       else
       {
         next = sl~load_uint(1);
       }

       if (next == flagT.at(tl))
       {
         temp~tpush(next);
         tl += 1;

         if (tl == flagL)
         {
           if ((builder_bits(b) + valueL) >= 1023)
           {
             builders~tpush(b);
             b = begin_cell();
           }
           var i = 0;
           repeat (valueL)
           {
             b~store_uint(valueT.at(i), 1);
             i += 1;
           }
           
           temp = empty_tuple();
           tl = 0;
         }
       }
       else
       {
         if (tl > 0)
         {
           if (builder_bits(b) < 1023)
           {
             b~store_uint(temp.at(0), 1);
           }
           else
           {
             builders~tpush(b);
             b = begin_cell().store_uint(temp.at(0), 1);
           }
           
           temp~tpush(next);
           
           repeat (tl)
           {
             var t = temp~tpop();
             cache~tpush(t);
           }

           temp = empty_tuple();
           tl = 0;
         }
         else
         {
           if (builder_bits(b) < 1023)
           {
             b~store_uint(next, 1);
           }
           else
           {
             builders~tpush(b);
             b = begin_cell().store_uint(next, 1);
           }
         }
       }
     }

    if (slice_refs(sl) > 0)
    {
      sl = (sl~load_ref()).begin_parse();
    }
    else
    {
      continue = false;
    }
  }

  ;; Set other temp
  if (tl > 0)
  {
    if ((builder_bits(b) + tl) >= 1023)
    {
      builders~tpush(b);
      b = begin_cell();
    }
    var i = 0;
    repeat (tl)
    {
      b~store_uint(temp.at(i), 1);
      i += 1;
    }
  }

  ;; Set other cache
  repeat (cache.tlen())
  {
    if (builder_bits(b) < 1023)
    {
      b~store_uint(cache~tpop(), 1);
    }
    else
    {
      builders~tpush(b);
      b = begin_cell().store_uint(cache~tpop(), 1);
    }
  }

  builders~tpush(b);
  
  ;; To tree !!!!!!!!!!!!!!!!!!!!!
  var b = begin_cell();
  repeat (builders.tlen())
  {
    var nt = builders~tpop();
    b = nt.store_ref(b.end_cell());
  }
  
  
  ;; Return
  return b.end_cell();
}
