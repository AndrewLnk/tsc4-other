() recv_internal() {
}

int tlen(tuple t) asm "TLEN";
forall X -> (tuple, X) ~tpop (tuple t) asm "TPOP";
(int) ubitsize (int a) asm "UBITSIZE";

;; convert int bits to tuple
(tuple) int_to_bits(int v)
{
  var size = ubitsize(v);
  var c = begin_cell().store_int(v, size + 1).end_cell();
  var s = c.begin_parse();
  s~load_uint(1);

  var list = empty_tuple();
  repeat (size)
  {
    list~tpush(s~load_uint(1));
  }

  return list;
}

(tuple) build_flow(tuple flag, tuple value, cell linked_list)
{
  var flen = flag.tlen();
  var vlen = value.tlen();
  
  var temp = empty_tuple();
  var templ = 0;
  var cache = empty_tuple();
  var cachel = 0;
  
  var sl = linked_list.begin_parse();
  var b = begin_cell();
  var builders = empty_tuple();
  
  var continue = slice_bits(sl) > 0;
  while(continue)
  {
    while (slice_bits(sl) > 0)
    {
      int next = 0;
      
      if (cachel > 0)
      {
        next = cache~tpop();
        cachel -= 1;
      }
      else
      {
        next = sl~load_uint(1);
      }
      
      if (next == flag.at(templ))
      {
        temp~tpush(next);
        templ += 1;
        
        if (templ == flen)
        {
          if ((builder_bits(b) + vlen) >= 1023)
          {
            builders~tpush(b);
            b = begin_cell();
          }
          var i = 0;
          repeat (vlen)
          {
            b~store_uint(value.at(i), 1);
            i += 1;
          }
          
          temp = empty_tuple();
          templ = 0;
        }
      }
      else
      {
        if (templ > 0)
        {
          if (builder_bits(b) < 1023)
          {
            b~store_uint(temp.at(0), 1);
          }
          else
          {
            builders~tpush(b);
            b = begin_cell().store_uint(temp.at(0), 1);
          }
          
          temp~tpush(next);
          
          repeat (templ){
            var t = temp~tpop();
            cache~tpush(t);
            cachel += 1;
          }

          temp = empty_tuple();
          templ = 0;
        }
        else
        {
          if (builder_bits(b) < 1023)
          {
            b~store_uint(next, 1);
          }
          else
          {
            builders~tpush(b);
            b = begin_cell().store_uint(next, 1);
          }
        }
      }
    }
    
    if (slice_refs(sl) > 0)
    {
      sl = (sl~load_ref()).begin_parse();
    }
    else
    {
      continue = false;
    }
  }
  
  ;; Set other temp
  if (templ > 0)
  {
    if ((builder_bits(b) + templ) >= 1023)
    {
      builders~tpush(b);
      b = begin_cell();
    }
    var i = 0;
    repeat (templ)
    {
      b~store_uint(temp.at(i), 1);
      i += 1;
    }
  }

  ;; Set other cache
  repeat (cachel)
  {
    if (builder_bits(b) < 1023)
    {
      b~store_uint(cache~tpop(), 1);
    }
    else
    {
      builders~tpush(b);
      b = begin_cell().store_uint(cache~tpop(), 1);
    }
  }

  builders~tpush(b);
  
  return builders;
}

;; testable
(cell) find_and_replace(int flag, int value, cell linked_list) method_id 
{
  ;; Ok for opt
  if ((flag <= 0) | (value <= 0)){ return null(); }
  ;; Ok for opt
  var tupleF = int_to_bits(flag);
  var tupleV = int_to_bits(value);
  ;; Create builders
  var builders = build_flow(tupleF, tupleV, linked_list);
  ;; To tree
  var b = begin_cell();
  repeat (builders.tlen())
  {
    var nt = builders~tpop();
    b = nt.store_ref(b.end_cell());
  }
  ;; Return
  return b.end_cell();
}
