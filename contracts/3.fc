{- 
  TASK 3 - Find and replace binary substring
  Binary string is represented as a cell linked list: string splitted to chunks,
  first chunk stored to the root cell, next one to the cell in ref and so on;
  each cell can have only one ref. 
  Write the method that find and replaces one flags in the binary string
  with another value. Flags and values can be of any length, but
  strictly up to 128 bits. The method must replace every flag it finds.
  Flag and the value to be replaced is guaranteed to be greater than 0.
  Lets give a simple example.
  
  We have the target flag 101110101 and the value to be written 111111111 as inputs, 
  
  and a linked list of cells, in which the bit value of the first cell ends with ...10100001011, 
  and in the ref we have cell that starts with 10101000111111...

  The output should be a linked list where the first cell ends with ...10100001111, 
  and the second cell starts with 11111000111111...
-}

() recv_internal() {
}

int tlen(tuple t) asm "TLEN";
forall X -> (tuple) to_tuple (X x) asm "NOP";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";
forall X -> (tuple, X) ~tpop (tuple t) asm "TPOP"; 

tuple int_to_bits(int v)
{
  var c = begin_cell().store_int(v, 253).end_cell();
  var s = c.begin_parse();

  var list = empty_tuple();
  var started = 0;
  var max = 129;
  repeat (slice_bits(s))
  {
    int b = s~load_uint(1);

    if (b == 1)
    {
      started = -1;
    }

    if (started & (max > 0))
    {
      list~tpush(b);
      max -= 1;
    }
  }

  return list;
}

(cell) build_flow(tuple flag, tuple value, cell linked_list)
{
  var flen = flag.tlen();
  var vlen = value.tlen();

  var temp = empty_tuple();
  var sl = linked_list.begin_parse();

  var b = begin_cell();
  
  while(slice_bits(sl) > 0)
  {
    var next = sl~load_uint(1);

    if (next == flag.at(temp.tlen()))
    {
      temp~tpush(next);

      if (temp.tlen() == flen)
      {
        temp = empty_tuple();
        b = store_to_builder_to(b, value, value.tlen());
      }
    }
    else
    {
      if (temp.tlen() > 0)
      {
        temp~tpush(next);
        
        var rem = 1;
        var i_counter = 1;
        while (i_counter < temp.tlen())
        {
          if (temp.at(i_counter) == 0)
          {
            rem += 1;
            i_counter += 1;
          }
          else
          {
            i_counter = 1000;
          }
        }
        
        b = store_to_builder_to(b, temp, rem);
        temp = remove_first_i(temp, rem);
        
        var loop = 1;
        while ((loop == 1) & temp.tlen() > 0)
        {
          var zero_count = check_first_is_zero(temp);
          b = store_to_builder_to(b, temp, zero_count);
          temp = remove_first_i(temp, zero_count);
          
          var i = 0;
          var br = 0;
          repeat (temp.tlen())
          {
            if ((temp.at(i) == flag.at(i)) & (br == 0))
            {
              i += 1;
            }
            else
            {
              br = 1;
            }
          }
          
          if ((i > 0) & (i != temp.tlen()))
          {
            b = store_to_builder_to(b, temp, i);
            temp = remove_first_i(temp, i);
          }
          else
          {
            loop = 0;
          }
        }
      }
      else
      {
        b = store_to_builder(b, next);
      }
    }
    
    if ((slice_bits(sl) == 0) & (slice_refs(sl) > 0))
    {
      sl = (sl~load_ref()).begin_parse();
    }
  }

  b = store_to_builder_to(b, temp, temp.tlen());
  return b.end_cell();
}

(builder) store_to_builder_to(builder b, tuple t, int to)
{
  if (t.tlen() == 0)
  {
    return b;
  }
  
  if ((builder_bits(b) + to) < 1023)
  {
    var i = 0;
    repeat (to)
    {
      b~store_uint(t.at(i), 1);    
      i += 1;
    }
    return b;
  }
  else
  {
     var b = begin_cell().store_uint(t.at(0), 1).store_ref(b.end_cell());
     var i = 1;
     repeat (to - 1)
     {
        b~store_uint(t.at(i), 1);
        i += 1;
     }
     return b;
  }
}

(builder) store_to_builder(builder b, int i)
{
  if (builder_bits(b) < 1023)
  {
    return b.store_uint(i, 1);
  }
  else
  {
    return begin_cell().store_uint(i, 1).store_ref(b.end_cell());
  }
}

(int) is_true(tuple t)
{
  var i = 0;
  repeat (t.tlen())
  {
    if (t.at(i) == 0)
    {
      return 0;
    }

    i += 1;
  }

  return -1;
}

(tuple) remove_first(tuple t)
{
  var overwrite = empty_tuple();
  var i = 1;
  repeat (t.tlen() - 1)
  {
    overwrite~tpush(t.at(i));
    i += 1;
  }

  return  overwrite;
}

(tuple) remove_first_i(tuple t, int r)
{
  var overwrite = empty_tuple();
  var i = r;
  repeat (t.tlen() - r)
  {
     overwrite~tpush(t.at(i));
     i += 1;
  }

  return  overwrite;
}

(int) check_first_is_zero(tuple t)
{
  var i_counter = 0;
  while (i_counter < t.tlen())
  {
    if (t.at(i_counter) == 0)
    {
      i_counter += 1;
    }
    else
    {
       return i_counter;
    }
  }

  return i_counter;
}

(cell) revert_tree(cell tree)
{
  var s = tree.begin_parse();
  builder reverted = null();
  var filled = 0;
  
  while (slice_empty?(s) == 0)
  {
    if (s.slice_refs() > 0)
    {
      var ref = (s~load_ref()).begin_parse();
      
      if (filled == 0)
      {
        reverted = begin_cell().store_slice(s);
        filled = 1;
      }
      else
      {
        reverted = begin_cell().store_slice(s).store_ref(reverted.end_cell());
      }
      
      s = ref;
    }
    else
    {
      if (filled == 0)
      {
        return begin_cell().store_slice(s).end_cell();
      }
      else
      {
        return begin_cell().store_slice(s).store_ref(reverted.end_cell()).end_cell();
      }
    }
  }

  return begin_cell().end_cell();
}

;; testable
(cell) find_and_replace(int flag, int value, cell linked_list) method_id 
{
  if (flag <= 0)
  {
    return linked_list;
  }

  if (value <= 0)
  {
    return linked_list;
  }

  var tupleF = int_to_bits(flag);
  var tupleV = int_to_bits(value);
  
  if (tupleF.tlen() >= 128){
    return linked_list;
  }

  if (tupleV.tlen() >= 128){
    return linked_list;
  }

  var tree = build_flow(tupleF, tupleV, linked_list);
  return revert_tree(tree);
}

;; testable
(int) debug_int_bit(int value, int i) method_id
{
  return int_to_bits(value).at(i - 1);
}

;; testable
(int) debug_int_bit_length(int value) method_id
{
  return value;
}

(cell) debug_cell_view(int v) method_id
{
  var c = begin_cell().store_uint(v, 128).end_cell();
  return c;
}