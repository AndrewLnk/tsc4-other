() recv_internal() {
}

int tlen(tuple t) asm "TLEN";
forall X -> (tuple, X) ~tpop (tuple t) asm "TPOP";
int ubitsize (int a) asm "UBITSIZE";
int builder_free(builder b) asm "BREMBITS";

;; testable
(cell) find_and_replace(int flag, int value, cell linked_list) method_id 
{
  ;; Ok for opt
  if ((flag <= 0) | (value <= 0)) { return begin_cell().end_cell(); }

  ;; Setup flag info
  var flagL = ubitsize(flag);
  var tempS = begin_cell().store_int(flag, flagL + 1).end_cell().begin_parse();
  tempS~load_uint(1);

  var flagT = empty_tuple();
  repeat (flagL)
  {
    flagT~tpush(tempS~load_uint(1));
  }

  ;; Setup value info
  var valueL = ubitsize(value);
  var valueB = begin_cell().store_uint(value, valueL);
  
  ;; Create builders !!!!!!!!!!!!!!!!!!!!!1
  var temp = empty_tuple();
  var tl = 0;
  var cache = empty_tuple();
  var cl = 0;

  var sl = linked_list.begin_parse();
  var b = begin_cell();
  var builders = empty_tuple();
  
  repeat (slice_depth(sl) + 1)
  {
     var bits_count = slice_bits(sl);
     while (bits_count > 0)
     {
       repeat (bits_count)
       {
         int next = 0;

         if (cl > 0)
         {
           next = cache~tpop();
           cl -= 1;
         }
         else
         {
           next = sl~load_uint(1);
           bits_count -= 1;
         }

         if (next == flagT.at(tl))
         {
           temp~tpush(next);
           tl += 1;
           
           if (tl == flagL)
           {
             if (builder_free(b) < valueL)
             {
               builders~tpush(b);
               b = begin_cell();
             }

             b = b.store_builder(valueB);

             temp = empty_tuple();
             tl = 0;
           }
         }
         else
         {
           if (tl > 0)
           {
             if (builder_free(b) > 0)
             {
               b~store_uint(temp.first(), 1);
             }
             else
             {
               builders~tpush(b);
               b = begin_cell().store_uint(temp.first(), 1);
             }

             temp~tpush(next);

             repeat (tl)
             {
               var t = temp~tpop();
               cache~tpush(t);
             }
             cl += tl;
             temp = empty_tuple();
             tl = 0;
           }
           else
           {
             if (builder_free(b) > 0)
             {
               b~store_uint(next, 1);
             }
             else
             {
               builders~tpush(b);
               b = begin_cell().store_uint(next, 1);
             }
           }
         } 
       }
     }

    if (~ slice_refs_empty?(sl))
    {
      sl = (sl~load_ref()).begin_parse();
    }
  }
  ;; Set other temp
  if (tl > 0)
  {
    if (builder_free(b) < tl)
    {
      builders~tpush(b);
      b = begin_cell();
    }
    var i = 0;
    repeat (tl)
    {
      b~store_uint(temp.at(i), 1);
      i += 1;
    }
  }
  ;; Set other cache
  repeat (cl)
  {
    if (builder_free(b) > 0)
    {
      b~store_uint(cache~tpop(), 1);
    }
    else
    {
      builders~tpush(b);
      b = begin_cell().store_uint(cache~tpop(), 1);
    }
  }
  builders~tpush(b);
  
  ;; To tree !!!!!!!!!!!!!!!!!!!!!
  var b = begin_cell();
  repeat (builders.tlen())
  {
    var nt = builders~tpop();
    b = nt.store_ref(b.end_cell());
  }
  
  ;; Return
  return b.end_cell();
}