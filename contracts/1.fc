{-
  TASK 1 - Find branch of the cell tree
  Write the method that will find a branch of the tree by comparing its
  hash with the hash received in the first parameter. When the algorithm finds
  the subtree (branch) whose hash equals the received hash, the root cell of
  this branch should be returned. Return empty cell if the branch is not found.
-}


() recv_internal() 
{
}

;; From telegram chat (get length of tuple)
int tlen(tuple t) asm "TLEN"; 

;; testable
(cell) find_branch_by_hash(int hash, cell tree) method_id 
{
  ;; Create empty tuple
  var list = empty_tuple();
  ;; Create tuple with tree
  list = cons(tree, list);

  ;; Check for cell with hash or when all tree checked
  while (tlen(list) > 0) 
  {
    ;; Load next item from list 
    var part = list~list_next();
    
    ;; Check if fould
    if (cell_hash(part) == hash) 
    {
      return part;
    }

    ;; Start parse current cell
    var to_slice = part.begin_parse();

    ;; Check each reference of cell
    while (~ slice_refs_empty?(to_slice)) 
    {
      ;; Load ref in cell
      var next_ref = to_slice~load_ref();
      ;; Add loaded ref to list for future checking
      list = cons(next_ref, list);
    }
  }

  ;; Return empty cell if not found
  return begin_cell().end_cell(); 
}
