() recv_internal() 
{
}

forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";

;; testable
(cell) find_branch_by_hash(int hash, cell tree) method_id 
{
  tuple stack = null();
  stack~push_back(tree);

  while (~ stack.is_null())
  {
    var c = stack~pop_back();
    
    if (cell_hash(c) == hash)
    {
      return c;
    }
    else
    {
      var s = c.begin_parse();
      repeat (s.slice_refs())
      {
        stack~push_back(s~load_ref());
      }
    }
  }

  return begin_cell().end_cell();
}
