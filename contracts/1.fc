() recv_internal() 
{
}

forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";

;; testable
(cell) find_branch_by_hash(int hash, cell tree) method_id 
{
  if (cell_hash(tree) == hash)
  {
    return tree;
  }
  else
  {
    tuple stack = null();
    stack~push_back(tree);

    while (~ stack.is_null())
    {
      slice s = (stack~pop_back()).begin_parse();
      
      repeat (s.slice_refs())
      {
        var next = s~load_ref();
        if (cell_hash(next) == hash)
        {
          return next;
        }
        else
        {
          stack~push_back(next);
        }
      }
    }

    return begin_cell().end_cell();
  }
}
