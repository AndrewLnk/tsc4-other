() recv_internal() 
{
}

forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";
int tlen(tuple t) asm "TLEN";

;; testable
(cell) find_branch_by_hash(int hash, cell tree) method_id 
{
  var visited = empty_tuple();
  tuple stack = null();
  stack~push_back(tree);

  while (~ stack.is_null())
  {
    cell c = stack~pop_back();
    var newHash = cell_hash(c);
    
    if (newHash == hash)
    {
      return c;
    }
    else
    {
      var i = 0;
      var checked = false;
      repeat (visited.tlen())
      {
        if (newHash == visited.at(i))
        {
            checked = true;
        }
        i += 1;
      }
      
      if (~ checked)
      {
        slice s = c.begin_parse();
        repeat (s.slice_refs())
        {
          stack~push_back(s~load_ref());
        }    
      }
    }
  }

  return begin_cell().end_cell();
}
